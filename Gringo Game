<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gringo Game</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            background-color: black;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            flex-direction: column;
        }
        #gameContainer {
            position: relative;
            width: 800px;
            height: 600px;
            background-color: grey;
            overflow: hidden;
            border: 5px solid #333;
        }
        #rektMessage {
            display: none;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 72px;
            color: #e74c3c;
            font-weight: bold;
            background-color: black;
            padding: 30px;
            border-radius: 20px;
            z-index: 2;
            text-align: center;
        }
        #playAgainButton {
            display: none;
            position: absolute;
            top: 60%;
            left: 50%;
            transform: translateX(-50%);
            padding: 15px 30px;
            font-size: 24px;
            background-color: #2ecc71;
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            z-index: 3;
            font-weight: bold;
        }
        .controls {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }
        .control-button {
            width: 80px;
            height: 80px;
            background-size: cover;
            border: none;
            background-color: transparent;
            cursor: pointer;
        }
        #leftButton {
            background-image: url('https://cdn-icons-png.flaticon.com/512/318/318276.png');
            background-size: contain;
            background-repeat: no-repeat;
            transform: scaleX(-1);
        }
        #rightButton {
            background-image: url('https://cdn-icons-png.flaticon.com/512/318/318276.png');
            background-size: contain;
            background-repeat: no-repeat;
        }
    </style>
</head>
<body>
    <div id="gameContainer">
        <div id="rektMessage">Game Over</div>
        <button id="playAgainButton" onclick="restartGame()">Play Again</button>
        <canvas id="gameCanvas" width="800" height="600"></canvas>
    </div>
    <div class="controls">
        <button class="control-button" id="leftButton"></button>
        <button class="control-button" id="rightButton"></button>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            initGame();
        });

        let gameInterval;
        let burgerInterval;
        let dog = { x: 350, y: 500, width: 100, height: 100, speed: 20, movingLeft: false, movingRight: false };
        let gameSpeed = 2;
        const candles = [];
        let gameOver = false;
        let burger = null;

        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');

        const dogImage = new Image();
        dogImage.src = 'dog_head_cropped.png';

        const bullishCandle = new Image();
        bullishCandle.src = 'Bullish.png';

        const bearishCandle = new Image();
        bearishCandle.src = 'Brearish.png';

        const burgerImage = new Image();
        burgerImage.src = 'burger.png';

        function initGame() {
            bindControls();
            startGame();
        }

        function bindControls() {
            document.addEventListener('keydown', handleKeyDown);
            document.addEventListener('keyup', handleKeyUp);
            document.getElementById('leftButton').addEventListener('mousedown', () => dog.movingLeft = true);
            document.getElementById('leftButton').addEventListener('mouseup', () => dog.movingLeft = false);
            document.getElementById('rightButton').addEventListener('mousedown', () => dog.movingRight = true);
            document.getElementById('rightButton').addEventListener('mouseup', () => dog.movingRight = false);
        }

        function handleKeyDown(event) {
            if (event.code === 'ArrowLeft') {
                dog.movingLeft = true;
            } else if (event.code === 'ArrowRight') {
                dog.movingRight = true;
            }
        }

        function handleKeyUp(event) {
            if (event.code === 'ArrowLeft') {
                dog.movingLeft = false;
            } else if (event.code === 'ArrowRight') {
                dog.movingRight = false;
            }
        }

        function startGame() {
            gameOver = false;
            candles.length = 0;
            gameSpeed = 2;
            burger = null;

            gameInterval = setInterval(() => {
                try {
                    createCandle();
                } catch (error) {
                    console.error('Error creating candle:', error);
                }
            }, 1000 / gameSpeed);

            burgerInterval = setInterval(() => {
                try {
                    createBurger();
                } catch (error) {
                    console.error('Error creating burger:', error);
                }
            }, 5000 / gameSpeed);

            requestAnimationFrame(gameLoop);
        }

        function createCandle() {
            const isBullish = Math.random() > 0.5;
            candles.push({
                x: Math.random() * (canvas.width - 60),
                y: 0,
                width: 60,
                height: 120,
                speed: gameSpeed,
                image: isBullish ? bullishCandle : bearishCandle,
                type: isBullish ? 'bullish' : 'bearish'
            });
        }

        function createBurger() {
            if (Math.random() < 0.05) {  // Simplified burger spawn chance
                burger = {
                    x: Math.random() * (canvas.width - 80),
                    y: 0,
                    width: 80,
                    height: 80,
                    speed: gameSpeed * 1.5
                };
            }
        }

        function drawDog() {
            ctx.drawImage(dogImage, dog.x, dog.y, dog.width, dog.height);
        }

        function drawCandles() {
            candles.forEach((candle, index) => {
                candle.y += candle.speed;

                ctx.drawImage(candle.image, candle.x, candle.y, candle.width, candle.height);

                if (
                    dog.x < candle.x + candle.width &&
                    dog.x + dog.width > candle.x &&
                    dog.y < candle.y + candle.height &&
                    dog.height + dog.y > candle.y
                ) {
                    if (candle.type === 'bearish') {
                        gameOver = true;
                        endGame();
                    }
                    candles.splice(index, 1);
                    gameSpeed += 0.1;
                }

                if (candle.y > canvas.height) {
                    candles.splice(index, 1);
                }
            });
        }

        function drawBurger() {
            if (burger) {
                burger.y += burger.speed;
                ctx.drawImage(burgerImage, burger.x, burger.y, burger.width, burger.height);

                if (
                    dog.x < burger.x + burger.width &&
                    dog.x + dog.width > burger.x &&
                    dog.y < burger.y + burger.height &&
                    dog.height + dog.y > burger.y
                ) {
                    burger = null;
                }

                if (burger && burger.y > canvas.height) {
                    burger = null;
                }
            }
        }

        function endGame() {
            document.getElementById('rektMessage').style.display = 'block';
            document.getElementById('playAgainButton').style.display = 'block';

            clearInterval(gameInterval);
            clearInterval(burgerInterval);
        }

        function gameLoop() {
            if (!gameOver) {
                try {
                    ctx.clearRect(0, 0, canvas.width, canvas.height);
                    drawDog();
                    drawCandles();
                    drawBurger();
                    moveDog();
                    requestAnimationFrame(gameLoop);
                } catch (error) {
                    console.error('Error during game loop:', error);
                }
            }
        }

        function moveDog() {
            if (dog.movingLeft && dog.x > 0) {
                dog.x -= dog.speed;
            }
            if (dog.movingRight && dog.x < canvas.width - dog.width) {
                dog.x += dog.speed;
            }
        }

        function restartGame() {
            document.getElementById('rektMessage').style.display = 'none';
            document.getElementById('playAgainButton').style.display = 'none';

            gameSpeed = 2;
            dog.x = canvas.width / 2 - 50;
            candles.length = 0;
            burger = null;
            gameOver = false;

            gameInterval = setInterval(createCandle, 1000 / gameSpeed);
            burgerInterval = setInterval(createBurger, 5000 / gameSpeed);
            gameLoop();
        }
    </script>
</body>
</html>
