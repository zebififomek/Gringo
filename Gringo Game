<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gringo Game</title>
    <style>
        /* Add your CSS styles here */
        body {
            margin: 0;
            overflow: hidden;
            background-image: url('Gringo back Ground.jpeg');
            background-size: 150px 150px;
            background-repeat: repeat;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            flex-direction: column;
            background-color: black; /* Fallback color */
        }
        #gameContainer {
            position: relative;
            width: 1000px;
            height: 1000px;
            border-radius: 15px;
            background-image: url('image.jpg'); /* Correct reference to the uploaded image */
            background-size: cover;
            background-repeat: no-repeat;
            background-position: center;
            box-shadow: 0px 0px 40px rgba(0, 0, 0, 0.8);
            overflow: hidden;
            z-index: 1;
            border: 10px solid #333;
            box-sizing: border-box;
            background-color: grey; /* Fallback color */
        }
        #leaderboard {
            position: absolute;
            top: 10px;
            right: -320px;
            width: 300px;
            height: 980px;
            background: rgba(34, 47, 62, 0.9);
            color: #ffffff;
            border-radius: 15px;
            box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.7);
            padding: 20px;
            font-size: 18px;
            overflow-y: auto;
            z-index: 2;
            animation: slideIn 0.5s forwards;
            transition: all 0.3s ease;
        }
        @keyframes slideIn {
            from {
                right: -350px;
                opacity: 0;
            }
            to {
                right: 10px;
                opacity: 1;
            }
        }
        #leaderboard h2 {
            text-align: center;
            margin-top: 0;
            font-size: 26px;
            color: #00ff88;
            text-shadow: 0px 0px 10px rgba(0, 255, 136, 0.7);
            border-bottom: 2px solid #00ff88;
            padding-bottom: 10px;
            margin-bottom: 20px;
        }
        #leaderboard ul {
            padding-left: 20px;
            list-style: none;
        }
        #leaderboard li {
            margin-bottom: 10px;
            font-size: 20px;
            background-color: #34495e;
            padding: 12px;
            border-radius: 8px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5);
            transition: all 0.3s ease;
        }
        #leaderboard li:hover {
            background-color: #00ff88;
            color: #000;
            transform: scale(1.05);
        }
        #leaderboard span {
            font-weight: bold;
            color: #f39c12;
        }
        #gameCanvas {
            background-color: rgba(0, 0, 0, 0.7);
            width: 100%;
            height: 100%;
            border-radius: 15px;
        }
        #score {
            position: absolute;
            top: 10px;
            left: 10px;
            font-size: 36px;
            color: #00ff88;
            background-color: rgba(0, 0, 0, 0.8);
            padding: 10px 20px;
            border-radius: 8px;
            z-index: 1;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5);
            font-weight: bold;
        }
        #multiplier {
            position: absolute;
            top: 70px;
            left: 10px;
            font-size: 32px;
            color: #f39c12;
            background-color: rgba(0, 0, 0, 0.8);
            padding: 5px 10px;
            border-radius: 8px;
            z-index: 1;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.5);
            font-weight: bold;
        }
        #rektMessage {
            display: none;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 72px;
            color: #e74c3c;
            font-weight: bold;
            background-color: black;
            padding: 30px;
            border-radius: 20px;
            z-index: 2;
            text-align: center;
            box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.7);
            animation: popIn 0.5s ease-in-out;
        }
        @keyframes popIn {
            0% {
                transform: translate(-50%, -50%) scale(0.7);
                opacity: 0;
            }
            100% {
                transform: translate(-50%, -50%) scale(1);
                opacity: 1;
            }
        }
        #finalScore {
            display: none;
            position: absolute;
            top: 40%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 32px;
            color: white;
            background-color: rgba(0, 0, 0, 0.8);
            padding: 10px;
            border-radius: 10px;
            z-index: 2;
            text-align: center;
            box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.7);
            font-weight: bold;
        }
        #finalPopup {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            padding: 20px;
            background-color: white;
            border: 2px solid #000;
            border-radius: 10px;
            z-index: 10;
            text-align: center;
        }
        #finalPopup img {
            max-width: 100%;
            height: auto;
        }
        #playAgainButton {
            display: none;
            position: absolute;
            top: 60%;
            left: 50%;
            transform: translateX(-50%);
            padding: 15px 30px;
            font-size: 24px;
            background-color: #2ecc71;
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            z-index: 3;
            box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.5);
            transition: all 0.3s ease;
            font-weight: bold;
        }
        #playAgainButton:hover {
            background-color: #27ae60;
            transform: translateX(-50%) scale(1.05);
        }
        .controls {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }
        .control-button {
            width: 80px;
            height: 80px;
            background-size: cover;
            border: none;
            background-color: transparent;
            cursor: pointer;
            filter: drop-shadow(0px 0px 5px rgba(0, 0, 0, 0.7));
        }
        #leftButton {
            background-image: url('https://cdn-icons-png.flaticon.com/512/318/318276.png');
            background-size: contain;
            background-repeat: no-repeat;
            transform: scaleX(-1);
        }
        #rightButton {
            background-image: url('https://cdn-icons-png.flaticon.com/512/318/318276.png');
            background-size: contain;
            background-repeat: no-repeat;
        }
    </style>
</head>
<body>
    <div id="gameContainer">
        <div id="score">Score: X1.0</div>
        <div id="multiplier">Boost Multiplier: X1</div>
        <div id="rektMessage">Game Over</div>
        <div id="finalScore">Final Score: X1.0</div>
        <button id="playAgainButton" onclick="restartGame()">Play Again</button>
        <canvas id="gameCanvas" width="1000" height="1000"></canvas>
    </div>
    <div class="controls">
        <button class="control-button" id="leftButton"></button>
        <button class="control-button" id="rightButton"></button>
    </div>
    <div id="leaderboard">
        <h2>Leaderboard</h2>
        <ul id="leaderboardList"></ul>
    </div>
    <div id="finalPopup">
        <img src="background.webp" alt="Final Score Image">
        <p id="popupScore">Final Score: X1.0</p>
        <button onclick="closePopup()">Close</button>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            initGame();
        });

        let gameInterval;
        let burgerInterval;
        let dog = { x: 450, y: 880, width: 100, height: 100, speed: 20, movingLeft: false, movingRight: false };
        let score = 1.0;
        let multiplier = 1;
        let gameSpeed = 2;
        const candles = [];
        let gameOver = false;
        let leaderboard = JSON.parse(localStorage.getItem('leaderboard')) || {};
        let burger = null;
        let nickname = localStorage.getItem('nickname');

        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');

        const dogImage = new Image();
        dogImage.src = 'dog_head_cropped.png';

        const bullishCandle = new Image();
        bullishCandle.src = 'Bullish.png';

        const bearishCandle = new Image();
        bearishCandle.src = 'Brearish.png';

        const burgerImage = new Image();
        burgerImage.src = 'burger.png';

        function initGame() {
            bindControls();
            updateLeaderboard();
            startGame();
        }

        function bindControls() {
            document.addEventListener('keydown', handleKeyDown);
            document.addEventListener('keyup', handleKeyUp);
            document.getElementById('leftButton').addEventListener('mousedown', () => dog.movingLeft = true);
            document.getElementById('leftButton').addEventListener('mouseup', () => dog.movingLeft = false);
            document.getElementById('rightButton').addEventListener('mousedown', () => dog.movingRight = true);
            document.getElementById('rightButton').addEventListener('mouseup', () => dog.movingRight = false);
        }

        function handleKeyDown(event) {
            if (event.code === 'ArrowLeft') {
                dog.movingLeft = true;
            } else if (event.code === 'ArrowRight') {
                dog.movingRight = true;
            }
        }

        function handleKeyUp(event) {
            if (event.code === 'ArrowLeft') {
                dog.movingLeft = false;
            } else if (event.code === 'ArrowRight') {
                dog.movingRight = false;
            }
        }

        function startGame() {
            gameOver = false;
            candles.length = 0;
            score = 1.0;
            multiplier = 1;
            gameSpeed = 2;
            burger = null;
            updateScore();
            updateMultiplier();

            gameInterval = setInterval(createCandle, 1000 / gameSpeed);
            burgerInterval = setInterval(createBurger, 5000 / gameSpeed);

            requestAnimationFrame(gameLoop);
        }

        function createCandle() {
            const isBullish = Math.random() > 0.5;
            candles.push({
                x: Math.random() * (canvas.width - 60),
                y: 0,
                width: 60,
                height: 120,
                speed: gameSpeed,
                image: isBullish ? bullishCandle : bearishCandle,
                type: isBullish ? 'bullish' : 'bearish'
            });
        }

        function createBurger() {
            let spawnChance = score <= 2 ? 0.1 : score <= 3 ? 0.05 : 0.02;
            if (Math.random() < spawnChance) {
                burger = {
                    x: Math.random() * (canvas.width - 80),
                    y: 0,
                    width: 80,
                    height: 80,
                    speed: gameSpeed * 1.5
                };
            }
        }

        function drawDog() {
            ctx.drawImage(dogImage, dog.x, dog.y, dog.width, dog.height);
        }

        function drawCandles() {
            candles.forEach((candle, index) => {
                candle.y += candle.speed;

                ctx.drawImage(candle.image, candle.x, candle.y, candle.width, candle.height);

                ctx.strokeStyle = candle.type === 'bullish' ? '#00ff00' : '#ff0000';
                ctx.lineWidth = 2;
                ctx.strokeRect(candle.x, candle.y, candle.width, candle.height);

                if (
                    dog.x < candle.x + candle.width &&
                    dog.x + dog.width > candle.x &&
                    dog.y < candle.y + candle.height &&
                    dog.height + dog.y > candle.y
                ) {
                    if (candle.type === 'bullish') {
                        score += 0.1 * multiplier;
                        score = parseFloat(score.toFixed(1));
                    } else if (candle.type === 'bearish') {
                        gameOver = true;
                        endGame();
                    }
                    candles.splice(index, 1);
                    gameSpeed += 0.1;
                    updateScore();
                }

                if (candle.y > canvas.height) {
                    candles.splice(index, 1);
                }
            });
        }

        function drawBurger() {
            if (burger) {
                burger.y += burger.speed;
                ctx.drawImage(burgerImage, burger.x, burger.y, burger.width, burger.height);

                if (
                    dog.x < burger.x + burger.width &&
                    dog.x + dog.width > burger.x &&
                    dog.y < burger.y + burger.height &&
                    dog.height + dog.y > burger.y
                ) {
                    multiplier += 1;
                    updateMultiplier();
                    burger = null;
                }

                if (burger && burger.y > canvas.height) {
                    burger = null;
                }
            }
        }

        function updateScore() {
            document.getElementById('score').innerText = `Score: X${score.toFixed(1)}`;
        }

        function updateMultiplier() {
            document.getElementById('multiplier').innerText = `Boost Multiplier: X${multiplier}`;
        }

        function endGame() {
            document.getElementById('rektMessage').style.display = 'block';
            document.getElementById('finalScore').innerText = `Final Score: X${score.toFixed(1)}`;
            document.getElementById('finalScore').style.display = 'block';
            document.getElementById('playAgainButton').style.display = 'block';
            document.getElementById('score').style.display = 'none';
            document.getElementById('multiplier').style.display = 'none';

            clearInterval(gameInterval);
            clearInterval(burgerInterval);

            document.getElementById('popupScore').innerText = `Final Score: X${score.toFixed(1)}`;
            document.getElementById('finalPopup').style.display = 'block';

            if (!nickname) {
                nickname = prompt("Enter your nickname:");
                if (nickname) {
                    localStorage.setItem('nickname', nickname);
                }
            }

            if (score > 1.0) {
                if (leaderboard[nickname]) {
                    if (score > parseFloat(leaderboard[nickname])) {
                        leaderboard[nickname] = score.toFixed(1);
                    }
                } else {
                    leaderboard[nickname] = score.toFixed(1);
                }

                const sortedLeaderboard = Object.keys(leaderboard)
                    .map(name => ({ nickname: name, score: leaderboard[name] }))
                    .sort((a, b) => b.score - a.score);

                if (sortedLeaderboard.length > 10) {
                    sortedLeaderboard.splice(10);
                }

                localStorage.setItem('leaderboard', JSON.stringify(leaderboard));
                updateLeaderboard(sortedLeaderboard);
            }
        }

        function updateLeaderboard(sortedLeaderboard) {
            const leaderboardList = document.getElementById('leaderboardList');
            leaderboardList.innerHTML = '';

            sortedLeaderboard.forEach((entry, index) => {
                const listItem = document.createElement('li');
                listItem.innerText = `${index + 1}. ${entry.nickname}`;
                const scoreSpan = document.createElement('span');
                scoreSpan.innerText = `X${entry.score}`;
                listItem.appendChild(scoreSpan);
                leaderboardList.appendChild(listItem);
            });
        }

        function closePopup() {
            document.getElementById('finalPopup').style.display = 'none';
        }

        function gameLoop() {
            if (!gameOver) {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                drawDog();
                drawCandles();
                drawBurger();
                moveDog();
                requestAnimationFrame(gameLoop);
            }
        }

        function moveDog() {
            if (dog.movingLeft && dog.x > 0) {
                dog.x -= dog.speed;
            }
            if (dog.movingRight && dog.x < canvas.width - dog.width) {
                dog.x += dog.speed;
            }
        }

        function restartGame() {
            document.getElementById('rektMessage').style.display = 'none';
            document.getElementById('finalScore').style.display = 'none';
            document.getElementById('playAgainButton').style.display = 'none';
            document.getElementById('score').style.display = 'block';
            document.getElementById('multiplier').style.display = 'block';

            score = 1.0;
            multiplier = 1;
            gameSpeed = 2;
            dog.x = canvas.width / 2 - 50;
            candles.length = 0;
            burger = null;
            gameOver = false;

            gameInterval = setInterval(createCandle, 1000 / gameSpeed);
            burgerInterval = setInterval(createBurger, 5000 / gameSpeed);
            updateScore();
            updateMultiplier();
            gameLoop();
        }
    </script>
</body>
</html>
