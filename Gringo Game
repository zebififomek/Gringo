<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gringo Game</title>
    <style>
        /* All the previously defined styles remain the same */
    </style>
</head>
<body>
    <div id="gameContainer">
        <div id="score">Score: X1.0</div>
        <div id="multiplier">Boost Multiplier: X1</div>
        <div id="rektMessage">Game Over</div>
        <div id="finalScore">Final Score: X1.0</div>
        <button id="playAgainButton" onclick="game.restartGame()">Play Again</button>
        <canvas id="gameCanvas" width="1000" height="1000"></canvas>
    </div>
    <div class="controls">
        <button class="control-button" id="leftButton"></button>
        <button class="control-button" id="rightButton"></button>
    </div>
    <div id="leaderboard">
        <h2>Leaderboard</h2>
        <ul id="leaderboardList"></ul>
    </div>
    <div id="finalPopup">
        <img src="background.webp" alt="Final Score Image">
        <p id="popupScore">Final Score: X1.0</p>
        <button onclick="game.closePopup()">Close</button>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            window.game = new GringoGame();
            game.init();
        });

        class GringoGame {
            constructor() {
                this.canvas = document.getElementById('gameCanvas');
                this.ctx = this.canvas.getContext('2d');
                this.nickname = localStorage.getItem('nickname');
                this.dog = { x: this.canvas.width / 2 - 50, y: this.canvas.height - 120, width: 100, height: 100, speed: 20, movingLeft: false, movingRight: false };
                this.score = 1.0;
                this.multiplier = 1;
                this.gameSpeed = 2;
                this.candles = [];
                this.gameOver = false;
                this.leaderboard = JSON.parse(localStorage.getItem('leaderboard')) || [];
                this.burger = null;
                this.assetsLoaded = false;

                this.assets = {
                    dogImage: new Image(),
                    bullishCandle: new Image(),
                    bearishCandle: new Image(),
                    burgerImage: new Image()
                };

                this.assets.dogImage.src = 'dog_head_cropped.png';
                this.assets.bullishCandle.src = 'Bullish.png';
                this.assets.bearishCandle.src = 'Brearish.png';
                this.assets.burgerImage.src = 'burger.png';

                this.loadedAssets = 0;
            }

            init() {
                this.bindControls();
                this.updateLeaderboard();
                this.loadAssets();
            }

            loadAssets() {
                Object.values(this.assets).forEach(asset => {
                    asset.onload = () => {
                        this.loadedAssets++;
                        if (this.loadedAssets === Object.keys(this.assets).length) {
                            this.startGame();
                        }
                    };
                    asset.onerror = () => {
                        console.error('Error loading asset:', asset.src);
                        this.loadedAssets++;
                        if (this.loadedAssets === Object.keys(this.assets).length) {
                            this.startGame();
                        }
                    };
                });
            }

            bindControls() {
                document.addEventListener('keydown', (event) => this.handleKeyDown(event));
                document.addEventListener('keyup', (event) => this.handleKeyUp(event));
                document.getElementById('leftButton').addEventListener('mousedown', () => this.dog.movingLeft = true);
                document.getElementById('leftButton').addEventListener('mouseup', () => this.dog.movingLeft = false);
                document.getElementById('rightButton').addEventListener('mousedown', () => this.dog.movingRight = true);
                document.getElementById('rightButton').addEventListener('mouseup', () => this.dog.movingRight = false);
            }

            handleKeyDown(event) {
                if (event.code === 'ArrowLeft') {
                    this.dog.movingLeft = true;
                } else if (event.code === 'ArrowRight') {
                    this.dog.movingRight = true;
                }
            }

            handleKeyUp(event) {
                if (event.code === 'ArrowLeft') {
                    this.dog.movingLeft = false;
                } else if (event.code === 'ArrowRight') {
                    this.dog.movingRight = false;
                }
            }

            startGame() {
                this.gameOver = false;
                this.candles = [];
                this.score = 1.0;
                this.multiplier = 1;
                this.gameSpeed = 2;
                this.burger = null;
                this.updateScore();
                this.updateMultiplier();

                this.candleInterval = setInterval(() => this.createCandle(), 1000 / this.gameSpeed);
                this.burgerInterval = setInterval(() => this.createBurger(), 5000 / this.gameSpeed);

                requestAnimationFrame(() => this.gameLoop());
            }

            createCandle() {
                const isBullish = Math.random() > 0.5;
                this.candles.push({
                    x: Math.random() * (this.canvas.width - 60),
                    y: 0,
                    width: 60,
                    height: 120,
                    speed: this.gameSpeed,
                    image: isBullish ? this.assets.bullishCandle : this.assets.bearishCandle,
                    type: isBullish ? 'bullish' : 'bearish'
                });
            }

            createBurger() {
                let spawnChance = this.score <= 2 ? 0.1 : this.score <= 3 ? 0.05 : 0.02;
                if (Math.random() < spawnChance) {
                    this.burger = {
                        x: Math.random() * (this.canvas.width - 80),
                        y: 0,
                        width: 80,
                        height: 80,
                        speed: this.gameSpeed * 1.5
                    };
                }
            }

            drawDog() {
                this.ctx.drawImage(this.assets.dogImage, this.dog.x, this.dog.y, this.dog.width, this.dog.height);
            }

            drawCandles() {
                this.candles.forEach((candle, index) => {
                    candle.y += candle.speed;

                    this.ctx.drawImage(candle.image, candle.x, candle.y, candle.width, candle.height);

                    this.ctx.strokeStyle = candle.type === 'bullish' ? '#00ff00' : '#ff0000';
                    this.ctx.lineWidth = 2;
                    this.ctx.strokeRect(candle.x, candle.y, candle.width, candle.height);

                    if (
                        this.dog.x < candle.x + candle.width &&
                        this.dog.x + this.dog.width > candle.x &&
                        this.dog.y < candle.y + candle.height &&
                        this.dog.height + this.dog.y > candle.y
                    ) {
                        if (candle.type === 'bullish') {
                            this.score += 0.1 * this.multiplier;
                            this.score = parseFloat(this.score.toFixed(1));
                        } else if (candle.type === 'bearish') {
                            this.gameOver = true;
                            this.endGame();
                        }
                        this.candles.splice(index, 1);
                        this.gameSpeed += 0.1;
                        this.updateScore();
                    }

                    if (candle.y > this.canvas.height) {
                        this.candles.splice(index, 1);
                    }
                });
            }

            drawBurger() {
                if (this.burger) {
                    this.burger.y += this.burger.speed;
                    this.ctx.drawImage(this.assets.burgerImage, this.burger.x, this.burger.y, this.burger.width, this.burger.height);

                    if (
                        this.dog.x < this.burger.x + this.burger.width &&
                        this.dog.x + this.dog.width > this.burger.x &&
                        this.dog.y < this.burger.y + this.burger.height &&
                        this.dog.height + this.dog.y > this.burger.y
                    ) {
                        this.multiplier += 1;
                        this.updateMultiplier();
                        this.burger = null;
                    }

                    if (this.burger && this.burger.y > this.canvas.height) {
                        this.burger = null;
                    }
                }
            }

            updateScore() {
                document.getElementById('score').innerText = `Score: X${this.score.toFixed(1)}`;
            }

            updateMultiplier() {
                document.getElementById('multiplier').innerText = `Boost Multiplier: X${this.multiplier}`;
            }

            endGame() {
                document.getElementById('rektMessage').style.display = 'block';
                document.getElementById('finalScore').innerText = `Final Score: X${this.score.toFixed(1)}`;
                document.getElementById('finalScore').style.display = 'block';
                document.getElementById('playAgainButton').style.display = 'block';
                document.getElementById('score').style.display = 'none';
                document.getElementById('multiplier').style.display = 'none';

                clearInterval(this.candleInterval);
                clearInterval(this.burgerInterval);

                document.getElementById('popupScore').innerText = `Final Score: X${this.score.toFixed(1)}`;
                document.getElementById('finalPopup').style.display = 'block';

                if (!this.nickname) {
                    this.nickname = prompt("Enter your nickname:");
                    if (this.nickname) {
                        localStorage.setItem('nickname', this.nickname);
                    }
                }

                if (this.score > 1.0) {
                    let existingEntry = this.leaderboard.find(entry => entry.nickname === this.nickname);
                    if (existingEntry) {
                        if (this.score > existingEntry.score) {
                            existingEntry.score = this.score.toFixed(1);
                        }
                    } else {
                        this.leaderboard.push({ nickname: this.nickname, score: this.score.toFixed(1) });
                    }
                    this.leaderboard.sort((a, b) => b.score - a.score);
                    if (this.leaderboard.length > 10) {
                        this.leaderboard.pop();
                    }
                    localStorage.setItem('leaderboard', JSON.stringify(this.leaderboard));
                    this.updateLeaderboard();
                }
            }

            updateLeaderboard() {
                const leaderboardList = document.getElementById('leaderboardList');
                leaderboardList.innerHTML = '';
                this.leaderboard.forEach((entry, index) => {
                    const listItem = document.createElement('li');
                    listItem.innerText = `${index + 1}. ${entry.nickname}`;
                    const scoreSpan = document.createElement('span');
                    scoreSpan.innerText = `X${entry.score}`;
                    listItem.appendChild(scoreSpan);
                    leaderboardList.appendChild(listItem);
                });
            }

            closePopup() {
                document.getElementById('finalPopup').style.display = 'none';
            }

            gameLoop() {
                if (!this.gameOver) {
                    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
                    this.drawDog();
                    this.drawCandles();
                    this.drawBurger();
                    this.moveDog();
                    requestAnimationFrame(() => this.gameLoop());
                }
            }

            moveDog() {
                if (this.dog.movingLeft && this.dog.x > 0) {
                    this.dog.x -= this.dog.speed;
                }
                if (this.dog.movingRight && this.dog.x < this.canvas.width - this.dog.width) {
                    this.dog.x += this.dog.speed;
                }
            }

            restartGame() {
                document.getElementById('rektMessage').style.display = 'none';
                document.getElementById('finalScore').style.display = 'none';
                document.getElementById('playAgainButton').style.display = 'none';
                document.getElementById('score').style.display = 'block';
                document.getElementById('multiplier').style.display = 'block';

                this.score = 1.0;
                this.multiplier = 1;
                this.gameSpeed = 2;
                this.dog.x = this.canvas.width / 2 - 50;
                this.candles.length = 0;
                this.burger = null;
                this.gameOver = false;

                this.candleInterval = setInterval(() => this.createCandle(), 1000 / this.gameSpeed);
                this.burgerInterval = setInterval(() => this.createBurger(), 5000 / this.gameSpeed);
                this.updateScore();
                this.updateMultiplier();
                this.gameLoop();
            }
        }
    </script>
</body>
</html>
